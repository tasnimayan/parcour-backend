generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  agent
  customer
}

enum UserStatus {
  active
  suspended
  deleted
}

enum Gender {
  male
  female
}

enum VehicleType {
  bike
  car
  van
  truck
  bicycle
}

enum EmploymentType {
  full_time
  part_time
  contract
}

enum AgentLocationStatus {
  available
  on_delivery
  offline
}

enum ShiftStatus {
  scheduled
  active
  completed
  missed
}

enum PaymentType {
  cod
  prepaid
  online
}

enum ParcelStatus {
  pending
  assigned
  picked_up
  in_transit
  delivered
  failed
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum ParcelPriority {
  low
  medium
  high
  urgent
}

enum ParcelService {
  standard
  express
  urgent
}

// Base User model
model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String     @map("password_hash")
  role      UserRole
  status    UserStatus @default(active)
  lastLogin DateTime?  @map("last_login")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Role-specific relations
  customer Customer?
  agent    Agent?
  admin    Admin?

  @@map("users")
}

// Customer model
model Customer {
  userId         String    @id @map("user_id")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName       String    @map("full_name")
  phone          String
  altPhone       String?   @map("alt_phone")
  emailVerified  Boolean   @default(false) @map("email_verified")
  governmentId   String?   @map("government_id")
  dob            DateTime? @db.Date
  gender         Gender?
  defaultAddress String?   @map("default_address") @db.Text
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  addresses CustomerAddress[]
  parcels   Parcel[]
  payments  Payment[]
  wallet    CustomerWallet?
  feedback  Feedback[]

  @@map("customers")
}

// Customer addresses
model CustomerAddress {
  id         Int      @id @default(autoincrement())
  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  label      String
  address    String   @db.Text
  city       String
  postalCode String   @map("postal_code")
  country    String   @default("Bangladesh")
  latitude   Decimal? @db.Decimal(9, 6)
  longitude  Decimal? @db.Decimal(9, 6)
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("customer_addresses")
}

// Agent model
model Agent {
  userId          String         @id @map("user_id")
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName        String         @map("full_name")
  phone           String
  altPhone        String?        @map("alt_phone")
  emailVerified   Boolean        @default(false) @map("email_verified")
  governmentId    String?        @map("government_id")
  dob             DateTime?      @db.Date
  profilePhoto    String?        @map("profile_photo") @db.Text
  vehicleType     VehicleType    @map("vehicle_type")
  vehicleNumber   String?        @map("vehicle_number")
  licenseNo       String?        @map("license_no")
  employmentType  EmploymentType @map("employment_type")
  availability    Boolean        @default(true)
  rating          Decimal        @default(0) @db.Decimal(3, 2)
  totalDeliveries Int            @default(0) @map("total_deliveries")
  lastActive      DateTime       @default(now()) @map("last_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  // Relations
  location    AgentLocation?
  shifts      AgentShift[]
  assignments ParcelAssignment[]
  routes      Route[]
  feedback    Feedback[]

  @@map("agents")
}

// Agent location tracking
model AgentLocation {
  agentId   String              @id @map("agent_id")
  agent     Agent               @relation(fields: [agentId], references: [userId], onDelete: Cascade)
  latitude  Decimal             @db.Decimal(9, 6)
  longitude Decimal             @db.Decimal(9, 6)
  updatedAt DateTime            @updatedAt @map("updated_at")
  status    AgentLocationStatus @default(available)

  @@map("agent_locations")
}

// Agent shifts
model AgentShift {
  id         Int         @id @default(autoincrement())
  agentId    String      @map("agent_id")
  agent      Agent       @relation(fields: [agentId], references: [userId], onDelete: Cascade)
  shiftStart DateTime    @map("shift_start")
  shiftEnd   DateTime    @map("shift_end")
  status     ShiftStatus

  @@map("agent_shifts")
}

// Admin model
model Admin {
  userId      String   @id @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName    String   @map("full_name")
  department  String
  permissions Json     @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  assignments ParcelAssignment[]

  @@map("admins")
}

// Parcel model
model Parcel {
  id                    String         @id @default(uuid())
  customerId            String         @map("customer_id")
  customer              Customer       @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  trackingCode          String         @unique @map("tracking_code")
  pickupAddress         String         @map("pickup_address") @db.Text
  pickupLat             Decimal?       @map("pickup_lat") @db.Decimal(9, 6)
  pickupLng             Decimal?       @map("pickup_lng") @db.Decimal(9, 6)
  deliveryAddress       String         @map("delivery_address") @db.Text
  deliveryLat           Decimal?       @map("delivery_lat") @db.Decimal(9, 6)
  deliveryLng           Decimal?       @map("delivery_lng") @db.Decimal(9, 6)
  recipientName         String         @map("recipient_name")
  recipientPhone        String         @map("recipient_phone")
  parcelSize            String         @map("parcel_size") // small, medium, large
  parcelWeight          Decimal?       @map("parcel_weight") @db.Decimal(10, 2)
  parcelType            String         @map("parcel_type") // parcel, document, etc
  serviceType           ParcelService  @map("service_type")
  priorityType          ParcelPriority @map("priority_type")
  paymentType           PaymentType    @map("payment_type")
  codAmount             Decimal?       @map("cod_amount") @db.Decimal(10, 2)
  status                ParcelStatus   @default(pending)
  note                  String?        @db.Text
  estimatedDeliveryDate DateTime?      @map("estimated_delivery_date")
  deliveredAt           DateTime?      @map("delivered_at")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")

  // Relations
  assignment ParcelAssignment?
  payment    Payment?
  feedback   Feedback?

  @@map("parcels")
}

// Parcel assignments
model ParcelAssignment {
  id         Int      @id @default(autoincrement())
  parcelId   String   @unique @map("parcel_id")
  parcel     Parcel   @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  agentId    String   @map("agent_id")
  agent      Agent    @relation(fields: [agentId], references: [userId], onDelete: Cascade)
  assignedBy String   @map("assigned_by")
  admin      Admin    @relation(fields: [assignedBy], references: [userId], onDelete: Cascade)
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@map("parcel_assignments")
}

// Routes
model Route {
  id        Int      @id @default(autoincrement())
  agentId   String   @map("agent_id")
  agent     Agent    @relation(fields: [agentId], references: [userId], onDelete: Cascade)
  routeJson Json     @map("route_json") @db.JsonB
  createdAt DateTime @default(now()) @map("created_at")

  @@map("routes")
}

// Payments
model Payment {
  id            String        @id @default(uuid())
  parcelId      String        @unique @map("parcel_id")
  parcel        Parcel        @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  userId        String        @map("user_id")
  customer      Customer      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  amount        Decimal       @db.Decimal(10, 2)
  paymentType   PaymentType   @map("payment_type")
  status        PaymentStatus @default(pending)
  transactionId String?       @map("transaction_id")
  createdAt     DateTime      @default(now()) @map("created_at")

  @@map("payments")
}

// Customer wallets
model CustomerWallet {
  id         String   @id @default(uuid())
  customerId String   @unique @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  balance    Decimal  @default(0) @db.Decimal(10, 2)
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("customer_wallets")
}

// Feedback
model Feedback {
  id         Int      @id @default(autoincrement())
  parcelId   String   @unique @map("parcel_id")
  parcel     Parcel   @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  agentId    String   @map("agent_id")
  agent      Agent    @relation(fields: [agentId], references: [userId], onDelete: Cascade)
  rating     Int      @db.SmallInt
  comment    String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("feedback")
}
